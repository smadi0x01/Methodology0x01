Hello, im going to be showing you all multiple AV evasion & techniques

**READ**

This is assuming you already have the skills to create malware and have learned about Operating Systems, Malware,PS,etc.
What is AntiVirus?
Antivirus software is designed to detect and prevent malicious files and processes from spreading across the operating system, thereby protecting the endpoint from executing them
  
AV's are built on different engines, what are those engines?
Well the engines are:
Static
Heuristic
Dynamic
Unpacking 
What is the static engine?
To begin with Static engine,As its name says, the static engine is  simple. The static engine of the antivirus software makes comparisons of  files in the OS to a db of signatures, and in this way can identify malware. It is impossible to identify all malware that exists using static signatures because any change to a particular malware file may bypass a particular static signature, and perhaps even completely bypass the static engine. Its purpose is to use static signatures, such as the YARA signature, to identify threats. These signatures are written from time to time and updated by antivirus security analysts on an almost daily basis.

What is Dynamic Engine?
The dynamic engine is a level up from the static engine, and its job is to examine the file at runtime using a variety of ways.
First method – API monitoring: The purpose of API monitoring is to intercept and detect malicious API requests in the operating system. System hooks are used to monitor APIs.Second method – sandboxing: A sandbox is a virtual environment separate from the physical host computer’s memory. This allows malicious software to be detected and analyzed by running it in a virtual environment rather than directly on the physical computer’s memory.Running malware in a sandboxed environment is effective against it, especially if it is not signed and identified by the antivirus software’s static engine.

What is a Heuristic Engine?
Heuristic based detection is a method that based on pre-defined behavioral rules can detect  malicious behavior of running processes. Using a heuristic engine, antivirus software becomes even more advanced. This type of engine determines a score for each file by conducting a statistical analysis that combines the static and dynamic engine methodologies. 

A few example rules are:
If a process tries to interact with the LSASS.exe process that contains users’ NTLM hashes, Kerberos tickets, and moreIf a process that is not signed by a reputable vendor tries to write itself into a persistent locationIf a process opens a listening port and waits to receive commands from a C2 server
The main disadvantage of the heuristic engine is that it can result in a huge number of false-positive detections, but it is also easy to learn how the engine works and bypass it through a series of basic tests using trial and error.

AV Bypass Techniques
Obfuscators
Encryption
Process Hallowing
Inline Hooking
Packers
Protectors

Obfuscation:
Obfuscation can be simply altering your code in such a way it's hard to reverse engineer, 
and hard for signature based scanning to identify the malware.
You could randomize the code in a PS script (powershell). One way I do it is dead code or modifying the existing instructions.

Encryption:
Encryption effectively eliminates the ability for AV(antivirus) to detect malware through signature alone. Malware authors commonly use ‘crypters’ in order to encrypt their malicious payloads. Crypters encrypt a file and attach a ‘Stub’, a program that will decrypt the contents and then execute them. 

There are two types of crypters:
Scantime and runtime crypters
Scantime Crypters only decrypt the payload and drop it into the disk and execute it whereas runtime crypers,
use process injection techniques to decrypt the payload and execute in memory

INLINE HOOKING:[b]  [/b]We create a subroutine kind of route, in which we add some code and change the flow of execution so that our malicious code is executed somewhere in between normal function execution and the function completes its work normally, without the user realising it has done something evil.

PACKERS[b]:[/b]Packers are used to reduce the size of the payload. Malicious codes were previously zipped using winRAR. However, nowadays, packers reduce executable size by creating an entirely new binary structure for the file on disk.

PROTECTORS[b]:[/b]The protectors were created to prevent any code from being reversed, debugged, or tested via the virtual machine emulation method. However, by constructing payload behind protection and sending to the victim, we may use this functionality to trick Anti-Virus solutions.
 
 ~ Enjoy The Movement!
